***********
** Bean  **
***********
############################################################################################################
I - Resgter Bean
############################################################################################################

** we have two way to resger Bean
 1 - XmlBeanFactory beanFactory = new XmlBeanFactory(new ClassPathResource("applicationContext2011-1.xml"));
 2 - ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext2011.xml");

############################################################################################################
II - set value to property of java class
############################################################################################################

** we have many to set value to property to java class
 1 - by create bean in xml.file
 2 - by java config class (set that class to application-config)

############################################################################################################
III - init value to property of java class using xml.file
############################################################################################################

** we have two way to init value to property of java class by create bean
 1 - set by tag<property>  (this tag need setter method for each property of java class) and need default constructor
 2 - set by tag<constructor-arg>  (this tag need constructor with parameter in java class)

############################################################################################################
IV - Bean injection (set other bean into mean Bean)
############################################################################################################
@@Description
      the mean injection is we can add property class to other class using bean xml.file
      ##property right there is not stactutor property, but it can we class.

** we have two way to inject sub bean to mean bean
 1 - set preset value to properties by constructor by ref  (mean call other bean into this bean by constructor ref)
 2 - set preset value to properties by property and use Bean inner bean  (mean not call other bean, but we write those bean into this mean Bean)

**
    those two style above we can use both of tag <constructor-arg> and tag <property>
    a - inject by using tag<constructor-arg>
    b - inject by using tag<property>

############################################################################################################
V - Lifecycle Callbacks |  registerShutdownHook()
############################################################################################################

**
    This method registers a shutdown hook with the JVM runtime. This hook receives notification on JVM shutdown,
    at that time it closes the underlying context and calls all @PreDestroy and other standard register destroy methods.
    If we don't want to use this method then we have to call ConfigurableApplicationContext#close() ourselves at JVM shutdown,
    otherwise our destroy methods won't get called.

    Interface work with registerShutdownHook()
        - Initialization
        - destruction
**
    two way to override those method
    - CropTool java class is show how to implement lifecycle callbacks BY java class
    1 - by Implement Those Interface and override method
            * afterPropertiesSet()
            * destroy()

    2 take a look in ReadMe-applicationContext2011-1.xml

In Spring2011-> service1.java
     - CropTool java class is show how to implement lifecycle callbacks BY java class
     - DrawingAndTypeTool is show how to config BY xml


############################################################################################################
VI - compare BeanFactory and ApplicationContext
############################################################################################################
One main difference between BeanFactory and ApplicationContext is that
    * BeanFactory only instantiates bean when we call getBean() method while
    * ApplicationContext instantiates singleton bean when the container is started,
        It doesn't wait for getBean() method to be called.